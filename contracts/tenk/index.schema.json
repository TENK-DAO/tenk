{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "AccountId": {
      "maxLength": 64,
      "minLength": 2,
      "pattern": "^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$",
      "type": "string"
    },
    "AddWhitelistAccountUngaurded": {
      "additionalProperties": false,
      "contractMethod": "change",
      "properties": {
        "account_id": {
          "$ref": "#/definitions/AccountId"
        },
        "allowance": {
          "$ref": "#/definitions/u32"
        }
      },
      "required": [
        "account_id",
        "allowance"
      ],
      "type": "object"
    },
    "AddWhitelistAccounts": {
      "additionalProperties": false,
      "contractMethod": "change",
      "properties": {
        "accounts": {
          "items": {
            "$ref": "#/definitions/AccountId"
          },
          "type": "array"
        },
        "allowance": {
          "$ref": "#/definitions/u32"
        }
      },
      "required": [
        "accounts"
      ],
      "type": "object"
    },
    "Balance": {
      "$ref": "#/definitions/U128",
      "description": "Balance is a type for storing amounts of tokens, specified in yoctoNEAR."
    },
    "Base64VecU8": {
      "description": "base64 string.",
      "type": "string"
    },
    "BasisPoint": {
      "$ref": "#/definitions/u16"
    },
    "CheckKey": {
      "additionalProperties": false,
      "contractMethod": "view",
      "properties": {
        "public_key": {
          "$ref": "#/definitions/PublicKey"
        }
      },
      "required": [
        "public_key"
      ],
      "type": "object"
    },
    "CloseContract": {
      "additionalProperties": false,
      "contractMethod": "change",
      "type": "object"
    },
    "CostOfLinkdrop": {
      "additionalProperties": false,
      "contractMethod": "view",
      "properties": {
        "minter": {
          "$ref": "#/definitions/AccountId"
        }
      },
      "required": [
        "minter"
      ],
      "type": "object"
    },
    "CostPerToken": {
      "additionalProperties": false,
      "contractMethod": "view",
      "properties": {
        "minter": {
          "$ref": "#/definitions/AccountId"
        }
      },
      "required": [
        "minter"
      ],
      "type": "object"
    },
    "CreateLinkdrop": {
      "additionalProperties": false,
      "contractMethod": "change",
      "description": "Create a pending token that can be claimed with corresponding private key",
      "properties": {
        "public_key": {
          "$ref": "#/definitions/PublicKey"
        }
      },
      "required": [
        "public_key"
      ],
      "type": "object"
    },
    "Duration": {
      "$ref": "#/definitions/u64",
      "description": "Raw type for duration in nanoseconds"
    },
    "FungibleTokenMetadata": {
      "additionalProperties": false,
      "properties": {
        "decimals": {
          "$ref": "#/definitions/u8"
        },
        "icon": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "reference_hash": {
          "$ref": "#/definitions/Base64VecU8"
        },
        "spec": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        }
      },
      "required": [
        "spec",
        "name",
        "symbol",
        "decimals"
      ],
      "type": "object"
    },
    "Gas": {
      "$ref": "#/definitions/u64",
      "description": "Represents the amount of NEAR tokens in \"gas units\" which are used to fund transactions."
    },
    "GetKeyBalance": {
      "additionalProperties": false,
      "contractMethod": "view",
      "description": "Returns the balance associated with given key.",
      "type": "object"
    },
    "GetLinkdropContract": {
      "additionalProperties": false,
      "contractMethod": "view",
      "type": "object"
    },
    "GetSaleInfo": {
      "additionalProperties": false,
      "contractMethod": "view",
      "type": "object"
    },
    "GetUserSaleInfo": {
      "additionalProperties": false,
      "contractMethod": "view",
      "properties": {
        "account_id": {
          "$ref": "#/definitions/AccountId"
        }
      },
      "required": [
        "account_id"
      ],
      "type": "object"
    },
    "Initial": {
      "additionalProperties": false,
      "contractMethod": "view",
      "type": "object"
    },
    "InitialMetadata": {
      "additionalProperties": false,
      "properties": {
        "icon": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "reference_hash": {
          "$ref": "#/definitions/Base64VecU8"
        },
        "spec": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "symbol",
        "uri"
      ],
      "type": "object"
    },
    "MintRateLimit": {
      "additionalProperties": false,
      "contractMethod": "view",
      "type": "object"
    },
    "New": {
      "additionalProperties": false,
      "contractMethod": "change",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/NftContractMetadata"
        },
        "owner_id": {
          "$ref": "#/definitions/AccountId"
        },
        "sale": {
          "$ref": "#/definitions/Sale"
        },
        "size": {
          "$ref": "#/definitions/u32"
        }
      },
      "required": [
        "owner_id",
        "metadata",
        "size",
        "sale"
      ],
      "type": "object"
    },
    "NewDefaultMeta": {
      "additionalProperties": false,
      "contractMethod": "change",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/InitialMetadata"
        },
        "owner_id": {
          "$ref": "#/definitions/AccountId"
        },
        "sale": {
          "$ref": "#/definitions/Sale"
        },
        "size": {
          "$ref": "#/definitions/u32"
        }
      },
      "required": [
        "owner_id",
        "metadata",
        "size"
      ],
      "type": "object"
    },
    "NftApprove": {
      "additionalProperties": false,
      "contractMethod": "change",
      "description": "Add an approved account for a specific token.\n\nRequirements\n* Caller of the method must attach a deposit of at least 1 yoctoâ“ƒ for security purposes\n* Contract MAY require caller to attach larger deposit, to cover cost of storing approver data\n* Contract MUST panic if called by someone other than token owner\n* Contract MUST panic if addition would cause `nft_revoke_all` to exceed single-block gas limit\n* Contract MUST increment approval ID even if re-approving an account\n* If successfully approved or if had already been approved, and if `msg` is present, contract MUST call `nft_on_approve` on `account_id`. See `nft_on_approve` description below for details.\n\nArguments:\n* `token_id`: the token for which to add an approval\n* `account_id`: the account to add to `approvals`\n* `msg`: optional string to be passed to `nft_on_approve`\n\nReturns void, if no `msg` given. Otherwise, returns promise call to `nft_on_approve`, which can resolve with whatever it wants.",
      "properties": {
        "account_id": {
          "$ref": "#/definitions/AccountId"
        },
        "msg": {
          "type": "string"
        },
        "token_id": {
          "$ref": "#/definitions/TokenId"
        }
      },
      "required": [
        "token_id",
        "account_id"
      ],
      "type": "object"
    },
    "NftContractMetadata": {
      "additionalProperties": false,
      "description": "Metadata for the NFT contract itself.",
      "properties": {
        "base_uri": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "reference_hash": {
          "$ref": "#/definitions/Base64VecU8"
        },
        "spec": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        }
      },
      "required": [
        "spec",
        "name",
        "symbol"
      ],
      "type": "object"
    },
    "NftIsApproved": {
      "additionalProperties": false,
      "contractMethod": "view",
      "description": "Check if a token is approved for transfer by a given account, optionally checking an approval_id\n\nArguments:\n* `token_id`: the token for which to revoke an approval\n* `approved_account_id`: the account to check the existence of in `approvals`\n* `approval_id`: an optional approval ID to check against current approval ID for given account\n\nReturns: if `approval_id` given, `true` if `approved_account_id` is approved with given `approval_id` otherwise, `true` if `approved_account_id` is in list of approved accounts",
      "properties": {
        "approval_id": {
          "$ref": "#/definitions/u64"
        },
        "approved_account_id": {
          "$ref": "#/definitions/AccountId"
        },
        "token_id": {
          "$ref": "#/definitions/TokenId"
        }
      },
      "required": [
        "token_id",
        "approved_account_id"
      ],
      "type": "object"
    },
    "NftMetadata": {
      "additionalProperties": false,
      "contractMethod": "view",
      "type": "object"
    },
    "NftMint": {
      "additionalProperties": false,
      "contractMethod": "change",
      "properties": {
        "token_id": {
          "$ref": "#/definitions/TokenId"
        },
        "token_metadata": {
          "$ref": "#/definitions/TokenMetadata"
        },
        "token_owner_id": {
          "$ref": "#/definitions/AccountId"
        }
      },
      "required": [
        "token_id",
        "token_owner_id",
        "token_metadata"
      ],
      "type": "object"
    },
    "NftMintMany": {
      "additionalProperties": false,
      "contractMethod": "change",
      "properties": {
        "num": {
          "$ref": "#/definitions/u32"
        }
      },
      "required": [
        "num"
      ],
      "type": "object"
    },
    "NftMintOne": {
      "additionalProperties": false,
      "contractMethod": "change",
      "type": "object"
    },
    "NftPayout": {
      "additionalProperties": false,
      "contractMethod": "view",
      "properties": {
        "balance": {
          "$ref": "#/definitions/U128"
        },
        "max_len_payout": {
          "$ref": "#/definitions/u32"
        },
        "token_id": {
          "type": "string"
        }
      },
      "required": [
        "token_id",
        "balance"
      ],
      "type": "object"
    },
    "NftRevoke": {
      "additionalProperties": false,
      "contractMethod": "change",
      "description": "Revoke an approved account for a specific token.\n\nRequirements\n* Caller of the method must attach a deposit of 1 yoctoâ“ƒ for security purposes\n* If contract requires >1yN deposit on `nft_approve`, contract MUST refund associated storage deposit when owner revokes approval\n* Contract MUST panic if called by someone other than token owner\n\nArguments:\n* `token_id`: the token for which to revoke an approval\n* `account_id`: the account to remove from `approvals`",
      "properties": {
        "account_id": {
          "$ref": "#/definitions/AccountId"
        },
        "token_id": {
          "$ref": "#/definitions/TokenId"
        }
      },
      "required": [
        "token_id",
        "account_id"
      ],
      "type": "object"
    },
    "NftRevokeAll": {
      "additionalProperties": false,
      "contractMethod": "change",
      "description": "Revoke all approved accounts for a specific token.\n\nRequirements\n* Caller of the method must attach a deposit of 1 yoctoâ“ƒ for security purposes\n* If contract requires >1yN deposit on `nft_approve`, contract MUST refund all associated storage deposit when owner revokes approvals\n* Contract MUST panic if called by someone other than token owner\n\nArguments:\n* `token_id`: the token with approvals to revoke",
      "properties": {
        "token_id": {
          "$ref": "#/definitions/TokenId"
        }
      },
      "required": [
        "token_id"
      ],
      "type": "object"
    },
    "NftSupplyForOwner": {
      "additionalProperties": false,
      "contractMethod": "view",
      "description": "Get number of tokens owned by a given account\n\nArguments:\n* `account_id`: a valid NEAR account\n\nReturns the number of non-fungible tokens owned by given `account_id` as a string representing the value as an unsigned 128-bit integer to avoid JSON number limit of 2^53.",
      "properties": {
        "account_id": {
          "$ref": "#/definitions/AccountId"
        }
      },
      "required": [
        "account_id"
      ],
      "type": "object"
    },
    "NftToken": {
      "additionalProperties": false,
      "contractMethod": "view",
      "description": "Returns the token with the given `token_id` or `null` if no such token.",
      "properties": {
        "token_id": {
          "$ref": "#/definitions/TokenId"
        }
      },
      "required": [
        "token_id"
      ],
      "type": "object"
    },
    "NftTokens": {
      "additionalProperties": false,
      "contractMethod": "view",
      "description": "Get a list of all tokens\n\nArguments:\n* `from_index`: a string representing an unsigned 128-bit integer, representing the starting index of tokens to return. (default 0)\n* `limit`: the maximum number of tokens to return (default total supply) Could fail on gas\n\nReturns an array of Token objects, as described in Core standard",
      "properties": {
        "from_index": {
          "$ref": "#/definitions/U128"
        },
        "limit": {
          "$ref": "#/definitions/u64"
        }
      },
      "type": "object"
    },
    "NftTokensForOwner": {
      "additionalProperties": false,
      "contractMethod": "view",
      "description": "Get list of all tokens owned by a given account\n\nArguments:\n* `account_id`: a valid NEAR account\n* `from_index`: a string representing an unsigned 128-bit integer, representing the starting index of tokens to return. (default 0)\n* `limit`: the maximum number of tokens to return. (default unlimited) Could fail on gas\n\nReturns a paginated list of all tokens owned by this account",
      "properties": {
        "account_id": {
          "$ref": "#/definitions/AccountId"
        },
        "from_index": {
          "$ref": "#/definitions/U128"
        },
        "limit": {
          "$ref": "#/definitions/u64"
        }
      },
      "required": [
        "account_id"
      ],
      "type": "object"
    },
    "NftTotalSupply": {
      "additionalProperties": false,
      "contractMethod": "view",
      "description": "Returns the total supply of non-fungible tokens as a string representing an unsigned 128-bit integer to avoid JSON number limit of 2^53.",
      "type": "object"
    },
    "NftTransfer": {
      "additionalProperties": false,
      "contractMethod": "change",
      "description": "Simple transfer. Transfer a given `token_id` from current owner to `receiver_id`.\n\nRequirements\n* Caller of the method must attach a deposit of 1 yoctoâ“ƒ for security purposes\n* Contract MUST panic if called by someone other than token owner or, if using Approval Management, one of the approved accounts\n* `approval_id` is for use with Approval Management, see <https://nomicon.io/Standards/NonFungibleToken/ApprovalManagement.html>\n* If using Approval Management, contract MUST nullify approved accounts on successful transfer.\n* TODO: needed? Both accounts must be registered with the contract for transfer to succeed. See see <https://nomicon.io/Standards/StorageManagement.html>\n\nArguments:\n* `receiver_id`: the valid NEAR account receiving the token\n* `token_id`: the token to transfer\n* `approval_id`: expected approval ID. A number smaller than 2^53, and therefore representable as JSON. See Approval Management standard for full explanation.\n* `memo` (optional): for use cases that may benefit from indexing or providing information for a transfer",
      "properties": {
        "approval_id": {
          "$ref": "#/definitions/u64"
        },
        "memo": {
          "type": "string"
        },
        "receiver_id": {
          "$ref": "#/definitions/AccountId"
        },
        "token_id": {
          "$ref": "#/definitions/TokenId"
        }
      },
      "required": [
        "receiver_id",
        "token_id"
      ],
      "type": "object"
    },
    "NftTransferCall": {
      "additionalProperties": false,
      "contractMethod": "change",
      "description": "Transfer token and call a method on a receiver contract. A successful workflow will end in a success execution outcome to the callback on the NFT contract at the method `nft_resolve_transfer`.\n\nYou can think of this as being similar to attaching native NEAR tokens to a function call. It allows you to attach any Non-Fungible Token in a call to a receiver contract.\n\nRequirements:\n* Caller of the method must attach a deposit of 1 yoctoâ“ƒ for security purposes\n* Contract MUST panic if called by someone other than token owner or, if using Approval Management, one of the approved accounts\n* The receiving contract must implement `ft_on_transfer` according to the standard. If it does not, FT contract's `ft_resolve_transfer` MUST deal with the resulting failed cross-contract call and roll back the transfer.\n* Contract MUST implement the behavior described in `ft_resolve_transfer`\n* `approval_id` is for use with Approval Management extension, see that document for full explanation.\n* If using Approval Management, contract MUST nullify approved accounts on successful transfer.\n\nArguments:\n* `receiver_id`: the valid NEAR account receiving the token.\n* `token_id`: the token to send.\n* `approval_id`: expected approval ID. A number smaller than 2^53, and therefore representable as JSON. See Approval Management standard for full explanation.\n* `memo` (optional): for use cases that may benefit from indexing or providing information for a transfer.\n* `msg`: specifies information needed by the receiving contract in order to properly handle the transfer. Can indicate both a function to call and the parameters to pass to that function.",
      "properties": {
        "approval_id": {
          "$ref": "#/definitions/u64"
        },
        "memo": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "receiver_id": {
          "$ref": "#/definitions/AccountId"
        },
        "token_id": {
          "$ref": "#/definitions/TokenId"
        }
      },
      "required": [
        "receiver_id",
        "token_id",
        "msg"
      ],
      "type": "object"
    },
    "NftTransferPayout": {
      "additionalProperties": false,
      "contractMethod": "change",
      "properties": {
        "approval_id": {
          "$ref": "#/definitions/u64"
        },
        "balance": {
          "$ref": "#/definitions/U128"
        },
        "max_len_payout": {
          "$ref": "#/definitions/u32"
        },
        "memo": {
          "type": "string"
        },
        "receiver_id": {
          "$ref": "#/definitions/AccountId"
        },
        "token_id": {
          "type": "string"
        }
      },
      "required": [
        "receiver_id",
        "token_id",
        "balance"
      ],
      "type": "object"
    },
    "Payout": {
      "additionalProperties": false,
      "description": "Copied from https://github.com/near/NEPs/blob/6170aba1c6f4cd4804e9ad442caeae9dc47e7d44/specs/Standards/NonFungibleToken/Payout.md#reference-level-explanation A mapping of NEAR accounts to the amount each should be paid out, in the event of a token-sale. The payout mapping MUST be shorter than the maximum length specified by the financial contract obtaining this payout data. Any mapping of length 10 or less MUST be accepted by financial contracts, so 10 is a safe upper limit. This currently deviates from the standard but is in the process of updating to use this type",
      "properties": {
        "payout": {
          "additionalProperties": {
            "$ref": "#/definitions/U128"
          },
          "type": "object"
        }
      },
      "required": [
        "payout"
      ],
      "type": "object"
    },
    "PublicKey": {
      "description": "Public key in a binary format with base58 string serialization with human-readable curve. The key types currently supported are `secp256k1` and `ed25519`.\n\nEd25519 public keys accepted are 32 bytes and secp256k1 keys are the uncompressed 64 format.",
      "type": "string"
    },
    "RemainingAllowance": {
      "additionalProperties": false,
      "contractMethod": "view",
      "properties": {
        "account_id": {
          "$ref": "#/definitions/AccountId"
        }
      },
      "required": [
        "account_id"
      ],
      "type": "object"
    },
    "Royalties": {
      "additionalProperties": false,
      "properties": {
        "accounts": {
          "additionalProperties": {
            "$ref": "#/definitions/BasisPoint"
          },
          "type": "object"
        },
        "percent": {
          "$ref": "#/definitions/BasisPoint"
        }
      },
      "required": [
        "accounts",
        "percent"
      ],
      "type": "object"
    },
    "Sale": {
      "additionalProperties": false,
      "properties": {
        "allowance": {
          "$ref": "#/definitions/u32"
        },
        "initial_royalties": {
          "$ref": "#/definitions/Royalties"
        },
        "mint_rate_limit": {
          "$ref": "#/definitions/u32"
        },
        "presale_price": {
          "$ref": "#/definitions/U128"
        },
        "presale_start": {
          "$ref": "#/definitions/TimestampMs"
        },
        "price": {
          "$ref": "#/definitions/U128"
        },
        "public_sale_start": {
          "$ref": "#/definitions/TimestampMs"
        },
        "royalties": {
          "$ref": "#/definitions/Royalties"
        }
      },
      "required": [
        "price"
      ],
      "type": "object"
    },
    "SaleInfo": {
      "additionalProperties": false,
      "description": "Information about the current sale",
      "properties": {
        "presale_start": {
          "$ref": "#/definitions/TimestampMs",
          "description": "Start of the VIP sale"
        },
        "price": {
          "$ref": "#/definitions/U128",
          "description": "Current price for one token"
        },
        "sale_start": {
          "$ref": "#/definitions/TimestampMs",
          "description": "Start of public sale"
        },
        "status": {
          "$ref": "#/definitions/Status",
          "description": "Current state of contract"
        },
        "token_final_supply": {
          "$ref": "#/definitions/u64",
          "description": "Total tokens that could be minted"
        }
      },
      "required": [
        "status",
        "presale_start",
        "sale_start",
        "token_final_supply",
        "price"
      ],
      "type": "object"
    },
    "StartPresale": {
      "additionalProperties": false,
      "contractMethod": "change",
      "properties": {
        "presale_price": {
          "$ref": "#/definitions/U128"
        },
        "public_sale_start": {
          "$ref": "#/definitions/TimestampMs"
        }
      },
      "type": "object"
    },
    "StartSale": {
      "additionalProperties": false,
      "contractMethod": "change",
      "properties": {
        "price": {
          "$ref": "#/definitions/U128"
        }
      },
      "type": "object"
    },
    "Status": {
      "description": "Current state of contract",
      "enum": [
        "Closed",
        "Presale",
        "Open",
        "SoldOut"
      ],
      "type": "string"
    },
    "StorageBalance": {
      "additionalProperties": false,
      "properties": {
        "available": {
          "$ref": "#/definitions/U128"
        },
        "total": {
          "$ref": "#/definitions/U128"
        }
      },
      "required": [
        "total",
        "available"
      ],
      "type": "object"
    },
    "StorageBalanceBounds": {
      "additionalProperties": false,
      "properties": {
        "max": {
          "$ref": "#/definitions/U128"
        },
        "min": {
          "$ref": "#/definitions/U128"
        }
      },
      "required": [
        "min"
      ],
      "type": "object"
    },
    "StorageUsage": {
      "$ref": "#/definitions/u64",
      "description": "StorageUsage is used to count the amount of storage used by a contract."
    },
    "Timestamp": {
      "$ref": "#/definitions/u64",
      "description": "Raw type for timestamp in nanoseconds"
    },
    "TimestampMs": {
      "$ref": "#/definitions/u64",
      "description": "milliseconds elapsed since the UNIX epoch"
    },
    "Token": {
      "additionalProperties": false,
      "description": "In this implementation, the Token struct takes two extensions standards (metadata and approval) as optional fields, as they are frequently used in modern NFTs.",
      "properties": {
        "approved_account_ids": {
          "additionalProperties": {
            "$ref": "#/definitions/u64"
          },
          "type": "object"
        },
        "metadata": {
          "$ref": "#/definitions/TokenMetadata"
        },
        "owner_id": {
          "$ref": "#/definitions/AccountId"
        },
        "token_id": {
          "$ref": "#/definitions/TokenId"
        }
      },
      "required": [
        "token_id",
        "owner_id"
      ],
      "type": "object"
    },
    "TokenId": {
      "description": "Note that token IDs for NFTs are strings on NEAR. It's still fine to use autoincrementing numbers as unique IDs if desired, but they should be stringified. This is to make IDs more future-proof as chain-agnostic conventions and standards arise, and allows for more flexibility with considerations like bridging NFTs across chains, etc.",
      "type": "string"
    },
    "TokenMetadata": {
      "additionalProperties": false,
      "description": "Metadata on the individual token level.",
      "properties": {
        "copies": {
          "$ref": "#/definitions/u64"
        },
        "description": {
          "type": "string"
        },
        "expires_at": {
          "type": "string"
        },
        "extra": {
          "type": "string"
        },
        "issued_at": {
          "type": "string"
        },
        "media": {
          "type": "string"
        },
        "media_hash": {
          "$ref": "#/definitions/Base64VecU8"
        },
        "reference": {
          "type": "string"
        },
        "reference_hash": {
          "$ref": "#/definitions/Base64VecU8"
        },
        "starts_at": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TokenStorageCost": {
      "additionalProperties": false,
      "contractMethod": "view",
      "type": "object"
    },
    "TokensLeft": {
      "additionalProperties": false,
      "contractMethod": "view",
      "type": "object"
    },
    "TotalCost": {
      "additionalProperties": false,
      "contractMethod": "view",
      "properties": {
        "minter": {
          "$ref": "#/definitions/AccountId"
        },
        "num": {
          "$ref": "#/definitions/u32"
        }
      },
      "required": [
        "num",
        "minter"
      ],
      "type": "object"
    },
    "TransferOwnership": {
      "additionalProperties": false,
      "contractMethod": "change",
      "properties": {
        "new_owner": {
          "$ref": "#/definitions/AccountId"
        }
      },
      "required": [
        "new_owner"
      ],
      "type": "object"
    },
    "U128": {
      "description": "String representation of a u128-bit integer",
      "pattern": "^[0-9]+$\nNote: largest u128 is \"340282366920938463463374607431768211455\"",
      "type": "string"
    },
    "UpdateAllowance": {
      "additionalProperties": false,
      "contractMethod": "change",
      "properties": {
        "allowance": {
          "$ref": "#/definitions/u32"
        }
      },
      "required": [
        "allowance"
      ],
      "type": "object"
    },
    "UpdateRoyalties": {
      "additionalProperties": false,
      "contractMethod": "change",
      "properties": {
        "royalties": {
          "$ref": "#/definitions/Royalties"
        }
      },
      "required": [
        "royalties"
      ],
      "type": "object"
    },
    "UpdateUri": {
      "additionalProperties": false,
      "contractMethod": "change",
      "properties": {
        "uri": {
          "type": "string"
        }
      },
      "required": [
        "uri"
      ],
      "type": "object"
    },
    "UserSaleInfo": {
      "additionalProperties": false,
      "description": "Information about the current sale from user perspective",
      "properties": {
        "is_vip": {
          "type": "boolean"
        },
        "remaining_allowance": {
          "$ref": "#/definitions/u32"
        },
        "sale_info": {
          "$ref": "#/definitions/SaleInfo"
        }
      },
      "required": [
        "sale_info",
        "is_vip"
      ],
      "type": "object"
    },
    "Whitelisted": {
      "additionalProperties": false,
      "contractMethod": "view",
      "properties": {
        "account_id": {
          "$ref": "#/definitions/AccountId"
        }
      },
      "required": [
        "account_id"
      ],
      "type": "object"
    },
    "WrappedDuration": {
      "type": "string"
    },
    "u16": {
      "maximum": 65535,
      "minimum": 0,
      "type": "integer"
    },
    "u32": {
      "maximum": 4294967295,
      "minimum": 0,
      "type": "integer"
    },
    "u64": {
      "maximum": 18446744073709552000,
      "minimum": 0,
      "type": "integer"
    },
    "u8": {
      "maximum": 255,
      "minimum": 0,
      "type": "integer"
    }
  }
}